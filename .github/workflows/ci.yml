name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install dependencies
      run: |
        python -m pip install setuptools pytest pytest-cov pytest-mock --upgrade pip 
        for dir in */source-*; do
          if [ -d "$dir" ]; then
            echo "Installing dependencies for $dir"
            (cd "$dir" && pip install '.[dev]')
          fi
        done
    - name: Run tests with coverage
      run: |
        # Run tests and generate XML report
        python -m pytest --cov=./ --cov-report=term-missing --cov-report=xml

        # Function to determine color based on coverage
        get_color() {
          local coverage=$1
          if (( $(echo "$coverage >= 90" | bc -l) )); then
            echo "brightgreen"
          elif (( $(echo "$coverage >= 80" | bc -l) )); then
            echo "green"
          elif (( $(echo "$coverage >= 70" | bc -l) )); then
            echo "yellow"
          else
            echo "red"
          fi
        }

        # Parse XML coverage report
        while IFS= read -r line; do
          if [[ $line =~ filename=\"([^\"]+)\" ]]; then
            filepath="${BASH_REMATCH[1]}"
            
            # Extract project name from path
            if [[ $filepath =~ ^([^/]+)/ ]]; then
              project_name="${BASH_REMATCH[1]}"
              
              if [[ $project_name != "tests" && $project_name != "." ]]; then
                # Get coverage for this file
                if [[ $line =~ line-rate=\"([^\"]+)\" ]]; then
                  coverage=$(echo "${BASH_REMATCH[1]} * 100" | bc | cut -d. -f1)
                  color=$(get_color $coverage)
                  echo "Found project: $project_name with coverage: $coverage%"
                  
                  # Update project's README
                  project_readme="${project_name}/README.md"
                  if [ -f "$project_readme" ]; then
                    # Add or update coverage badge in project README
                    if ! grep -q "Test Coverage" "$project_readme"; then
                      # Add badge after the first heading
                      sed -i "1s/^/![Test Coverage](https:\/\/img.shields.io\/badge\/coverage-${coverage}%25-${color}?style=for-the-badge\&logoColor=white)\n\n/" "$project_readme"
                    else
                      # Update existing badge
                      sed -i "s/coverage-[0-9.]*%25/coverage-${coverage}%25/" "$project_readme"
                      sed -i "s/brightgreen\|green\|yellow\|red/${color}/" "$project_readme"
                    fi
                  fi
                fi
              fi
            fi
          elif [[ $line =~ ^\<coverage.*line-rate=\"([^\"]+)\" ]]; then
            total_coverage=$(echo "${BASH_REMATCH[1]} * 100" | bc | cut -d. -f1)
            total_color=$(get_color $total_coverage)
            echo "Total coverage: $total_coverage%"
            # Update total coverage badge in root README
            sed -i "s/coverage-[0-9.]*%25/coverage-${total_coverage}%25/" README.md
            sed -i "s/brightgreen\|green\|yellow\|red/${total_color}/" README.md
          fi
        done < coverage.xml

    - name: Commit changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add README.md */README.md
        git commit -m "Update coverage badges [skip ci]" || exit 0
        git push
  
  pre-commit-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Docker
        uses: docker/setup-buildx-action@v3

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        id: pre-commit
        run: |
          pre-commit run --all-files
          echo "terraform_fmt=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_validate=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_docs=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_tflint=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_trivy=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_checkov=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "black=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "pytest=$([ $? -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT

      - name: Update README badges
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Create badges section
          echo "| Hook | Status |" > badges.md
          echo "|------|--------|" >> badges.md
          
          # Add each hook status
          for hook in terraform_fmt terraform_validate terraform_docs terraform_tflint terraform_trivy terraform_checkov black pytest; do
            status=$(echo "${{ steps.pre-commit.outputs.$hook }}")
            badge="![$hook](https://img.shields.io/badge/$hook-$status-$(if [ "$status" = "passed" ]; then echo "brightgreen"; else echo "red"; fi))"
            echo "| $hook | $badge |" >> badges.md
          done
          
          # Update README.md
          awk '
            BEGIN { p=1 }
            /^\| Hook \| Status \|/ { p=0 }
            /^# AWS Observability Solutions/ { p=1 }
            p { print }
          ' README.md > README.md.tmp
          
          # Insert badges at the right position
          awk '
            BEGIN { p=1 }
            /^# AWS Observability Solutions/ { 
              print
              while ((getline line < "badges.md") > 0) {
                print line
              }
              print ""
              p=0
            }
            p { print }
          ' README.md.tmp > README.md
          
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update pre-commit hook badges" || exit 0
          git push
