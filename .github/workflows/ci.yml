name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  pre-commit-checks:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Docker
        uses: docker/setup-buildx-action@v3

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        id: pre-commit
        run: |
          SKIP=pytest pre-commit run --all-files
          result=$?
          echo "Debug: Pre-commit exit code: $result"
          echo "terraform_fmt=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_validate=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_docs=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_tflint=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_trivy=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "terraform_checkov=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "black=$([ $result -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
          echo "Debug: Outputs written to GITHUB_OUTPUT:"
          cat $GITHUB_OUTPUT

      - name: Update pre-commit-checks badges
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Function to update or add badge
          update_badge() {
            local hook=$1
            local status=$2
            local color=$(if [ "$status" = "passed" ]; then echo "brightgreen"; else echo "red"; fi)
            local badge="![$hook](https://img.shields.io/badge/$hook-$status-$color)"
            
            echo "Debug: Updating badge for $hook with status: $status"
            
            # Check if badge already exists
            if grep -q "!\[$hook\]" README.md; then
              echo "Debug: Found existing badge for $hook"
              # Update existing badge
              sed -i "s|!\[$hook\].*)|$badge|" README.md
            else
              echo "Debug: Adding new badge for $hook"
              # Add new badge after the first heading
              sed -i "1s|^|$badge\n\n|" README.md
            fi
          }
          
          echo "Debug: Available step outputs:"
          echo "terraform_fmt: ${{ steps.pre-commit.outputs.terraform_fmt }}"
          echo "terraform_validate: ${{ steps.pre-commit.outputs.terraform_validate }}"
          echo "terraform_docs: ${{ steps.pre-commit.outputs.terraform_docs }}"
          echo "terraform_tflint: ${{ steps.pre-commit.outputs.terraform_tflint }}"
          echo "terraform_trivy: ${{ steps.pre-commit.outputs.terraform_trivy }}"
          echo "terraform_checkov: ${{ steps.pre-commit.outputs.terraform_checkov }}"
          echo "black: ${{ steps.pre-commit.outputs.black }}"
          
          # Update each hook status
          for hook in terraform_fmt terraform_validate terraform_docs terraform_tflint terraform_trivy terraform_checkov black; do
            case $hook in
              terraform_fmt) status="${{ steps.pre-commit.outputs.terraform_fmt }}" ;;
              terraform_validate) status="${{ steps.pre-commit.outputs.terraform_validate }}" ;;
              terraform_docs) status="${{ steps.pre-commit.outputs.terraform_docs }}" ;;
              terraform_tflint) status="${{ steps.pre-commit.outputs.terraform_tflint }}" ;;
              terraform_trivy) status="${{ steps.pre-commit.outputs.terraform_trivy }}" ;;
              terraform_checkov) status="${{ steps.pre-commit.outputs.terraform_checkov }}" ;;
              black) status="${{ steps.pre-commit.outputs.black }}" ;;
            esac
            update_badge "$hook" "$status"
          done
          
          # Commit and push changes
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git stash
          git pull --rebase origin main
          git stash pop || true
          git add README.md
          git commit -m "Update pre-commit hook badges" || exit 0
          git push

  test:
    needs: pre-commit-checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install dependencies
      run: |
        python -m pip install setuptools pytest pytest-cov pytest-mock --upgrade pip 
        for dir in */source-*; do
          if [ -d "$dir" ]; then
            echo "Installing dependencies for $dir"
            (cd "$dir" && pip install '.[dev]')
          fi
        done
    - name: Run tests with coverage
      run: |
        # Run tests and generate XML report
        python -m pytest --cov=./ --cov-report=term-missing --cov-report=xml

        # Function to determine color based on coverage
        get_color() {
          local coverage=$1
          if (( $(echo "$coverage >= 90" | bc -l) )); then
            echo "brightgreen"
          elif (( $(echo "$coverage >= 80" | bc -l) )); then
            echo "green"
          elif (( $(echo "$coverage >= 70" | bc -l) )); then
            echo "yellow"
          else
            echo "red"
          fi
        }

        # Parse XML coverage report
        while IFS= read -r line; do
          if [[ $line =~ filename=\"([^\"]+)\" ]]; then
            filepath="${BASH_REMATCH[1]}"
            
            # Extract project name from path
            if [[ $filepath =~ ^([^/]+)/ ]]; then
              project_name="${BASH_REMATCH[1]}"
              
              if [[ $project_name != "tests" && $project_name != "." ]]; then
                # Get coverage for this file
                if [[ $line =~ line-rate=\"([^\"]+)\" ]]; then
                  coverage=$(echo "${BASH_REMATCH[1]} * 100" | bc | cut -d. -f1)
                  color=$(get_color $coverage)
                  echo "Found project: $project_name with coverage: $coverage%"
                  
                  # Update project's README
                  project_readme="${project_name}/README.md"
                  if [ -f "$project_readme" ]; then
                    # Add or update coverage badge in project README
                    if ! grep -q "Test Coverage" "$project_readme"; then
                      # Add badge after the first heading
                      sed -i "1s/^/![Test Coverage](https:\/\/img.shields.io\/badge\/coverage-${coverage}%25-${color}?style=for-the-badge\&logoColor=white)\n\n/" "$project_readme"
                    else
                      # Update existing badge
                      sed -i "s/coverage-[0-9.]*%25/coverage-${coverage}%25/" "$project_readme"
                      sed -i "s/brightgreen\|green\|yellow\|red/${color}/" "$project_readme"
                    fi
                  fi
                fi
              fi
            fi
          elif [[ $line =~ ^\<coverage.*line-rate=\"([^\"]+)\" ]]; then
            total_coverage=$(echo "${BASH_REMATCH[1]} * 100" | bc | cut -d. -f1)
            total_color=$(get_color $total_coverage)
            echo "Total coverage: $total_coverage%"
            # Update total coverage badge in root README
            sed -i "s/coverage-[0-9.]*%25/coverage-${total_coverage}%25/" README.md
            sed -i "s/brightgreen\|green\|yellow\|red/${total_color}/" README.md
          fi
        done < coverage.xml
    - name: Commit changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git stash
        git pull --rebase origin main
        git stash pop || true
        git add README.md */README.md
        git commit -m "Update coverage badges [skip ci]" || exit 0
        git push
  
